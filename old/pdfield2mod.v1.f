!-----------------------------------------------------------------------!      module pdfield2d!! Fortran90 interface to 2d parallel PIC Fortran77 library pdfield2lib.f! written by viktor k. decyk, ucla! copyright 2000, regents of the university of california! update: may 15, 2004!      use globals, only: LINEAR, QUADRATIC      use pfield2d      implicit none      private      public :: LINEAR, QUADRATIC      public :: cguard, bguard, sguard, aguard      public :: sguardp, aguardp      public :: pois_init, pois, pois3, cuperp, bpois      public :: ibpois, maxwel, emfield, avpot      public :: fft_init, fft, fftc_init, ipdivf2, ipgradf2, ipcurlf2      public :: lcguard, lbguard      public :: poisd_init, poisd, poisd3, cuperpd      public :: bpoisd, bmfield, ibpoisd, avpotd!! define interface to original Fortran77 procedures      interface         subroutine PLCGUARD2X(fxy,nyp,nx,nxe,nypmx,nblok)         implicit none         integer :: nx, nxe, nypmx, nblok         real, dimension(2,nxe,nypmx,nblok) :: fxy         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLDGUARD2X(q,nyp,nx,nxe,nypmx,nblok)         implicit none         integer :: nx, nxe, nypmx, nblok         real, dimension(nxe,nypmx,nblok) :: q         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLBGUARD2X(bxy,nyp,nx,nxe,nypmx,nblok)         implicit none         integer :: nx, nxe, nypmx, nblok         real, dimension(3,nxe,nypmx,nblok) :: bxy         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLSCGUARD2X(cu,kstrt,nvp,noff,nyp,xj0,yj0,zj0,nx,ny,&     &ngx,ngy,nxe,nypmx,nblok)         implicit none         real :: xj0, yj0, zj0         integer :: kstrt, nvp, nx, ny, ngx, ngy, nxe, nypmx, nblok         real, dimension(3,nxe,nypmx,nblok) :: cu         integer, dimension(nblok) :: noff, nyp         end subroutine      end interface      interface         subroutine PLSCGUARD22X(cu,kstrt,nvp,noff,nyp,xj0,yj0,nx,ny,ngx&     &,ngy,nxe,nypmx,nblok)         implicit none         real :: xj0, yj0         integer :: kstrt, nvp, nx, ny, ngx, ngy, nxe, nypmx, nblok         real, dimension(2,nxe,nypmx,nblok) :: cu         integer, dimension(nblok) :: noff, nyp         end subroutine      end interface      interface         subroutine PLSGUARD2X(q,kstrt,nvp,noff,nyp,qi0,nx,ny,ngx,ngy,nx&     &e,nypmx,nblok)         implicit none         real :: qi0         integer :: kstrt, nvp, nx, ny, ngx, ngy, nxe, nypmx, nblok         real, dimension(nxe,nypmx,nblok) :: q         integer, dimension(nblok) :: noff, nyp         end subroutine      end interface      interface         subroutine PLSCGUARD2(cu,kstrt,nvp,nyp,xj0,yj0,zj0,nx,ngx,ngy,n&     &xe,nypmx,nblok)         implicit none         real :: xj0, yj0, zj0         integer :: kstrt, nvp, nx, ngx, ngy, nxe, nypmx, nblok         real, dimension(3,nxe,nypmx,nblok) :: cu         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLSCGUARD22(cu,kstrt,nvp,nyp,xj0,yj0,nx,ngx,ngy,nxe,&     &nypmx,nblok)         implicit none         real :: xj0, yj0         integer :: kstrt, nvp, nx, ngx, ngy, nxe, nypmx, nblok         real, dimension(2,nxe,nypmx,nblok) :: cu         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLSGUARD2(q,kstrt,nvp,nyp,qi0,nx,ngx,ngy,nxe,nypmx,n&     &blok)         implicit none         real :: qi0         integer :: kstrt, nvp, nx, ngx, ngy, nxe, nypmx, nblok         real, dimension(nxe,nypmx,nblok) :: q         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLACGUARD2X(cu,nyp,nx,nxe,nypmx,nblok)         implicit none         integer :: nx, nxe, nypmx, nblok         real :: cu         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLACGUARD22X(cu,nyp,nx,nxe,nypmx,nblok)         implicit none         integer :: nx, nxe, nypmx, nblok         real :: cu         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLAGUARD2X(q,nyp,nx,nxe,nypmx,nblok)         implicit none         integer :: nx, nxe, nypmx, nblok         real :: q         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLSCGUARD2XL(cu,kstrt,nvp,noff,nyp,xj0,yj0,zj0,nx,ny&     &,ngx,ngy,nxe,nypmx,nblok)         implicit none         real :: xj0, yj0, zj0         integer :: kstrt, nvp, nx, ny, ngx, ngy, nxe, nypmx, nblok         real, dimension(3,nxe,nypmx,nblok) :: cu         integer, dimension(nblok) :: noff, nyp         end subroutine      end interface      interface         subroutine PLSCGUARD22XL(cu,kstrt,nvp,noff,nyp,xj0,yj0,nx,ny,ng&     &x,ngy,nxe,nypmx,nblok)         implicit none         real :: xj0, yj0         integer :: kstrt, nvp, nx, ny, ngx, ngy, nxe, nypmx, nblok         real, dimension(2,nxe,nypmx,nblok) :: cu         integer, dimension(nblok) :: noff, nyp         end subroutine      end interface      interface         subroutine PLSGUARD2XL(q,kstrt,nvp,noff,nyp,qi0,nx,ny,ngx,ngy,n&     &xe,nypmx,nblok)         implicit none         real :: qi0         integer :: kstrt, nvp, nx, ny, ngx, ngy, nxe, nypmx, nblok         real, dimension(nxe,nypmx,nblok) :: q         integer, dimension(nblok) :: noff, nyp         end subroutine      end interface      interface         subroutine PLSCGUARD2L(cu,kstrt,nvp,nyp,xj0,yj0,zj0,nx,ngx,ngy,&     &nxe,nypmx,nblok)         implicit none         real :: xj0, yj0, zj0         integer :: kstrt, nvp, nx, ngx, ngy, nxe, nypmx, nblok         real, dimension(3,nxe,nypmx,nblok) :: cu         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLSCGUARD22L(cu,kstrt,nvp,nyp,xj0,yj0,nx,ngx,ngy,nxe&     &,nypmx,nblok)         implicit none         real :: xj0, yj0         integer :: kstrt, nvp, nx, ngx, ngy, nxe, nypmx, nblok         real, dimension(2,nxe,nypmx,nblok) :: cu         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PLSGUARD2L(q,kstrt,nvp,nyp,qi0,nx,ngx,ngy,nxe,nypmx,&     &nblok)         implicit none         real :: qi0         integer :: kstrt, nvp, nx, ngx, ngy, nxe, nypmx, nblok         real, dimension(nxe,nypmx,nblok) :: q         integer, dimension(nblok) :: nyp         end subroutine      end interface      interface         subroutine PPOISDX2(q,fx,fy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt&     &,ny2d,kxp2,j2blok,nyd)         implicit none         real :: ax, ay, affp, we         integer :: isign, nx, ny, kstrt, ny2d, kxp2, j2blok, nyd         complex, dimension(ny2d,kxp2,j2blok) :: q, fx, fy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PPOISDX22(q,fxy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,&     &ny2d,kxp2,j2blok,nyd)         implicit none         real :: ax, ay, affp, we         integer :: isign, nx, ny, kstrt, ny2d, kxp2, j2blok, nyd         complex, dimension(ny2d,kxp2,j2blok) :: q         complex, dimension(2,ny2d,kxp2,j2blok) :: fxy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PPOISDX23(q,fxy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,&     &ny2d,kxp2,j2blok,nyd)         implicit none         real :: ax, ay, affp, we         integer :: isign, nx, ny, kstrt, ny2d, kxp2, j2blok, nyd         complex, dimension(ny2d,kxp2,j2blok) :: q         complex, dimension(3,ny2d,kxp2,j2blok) :: fxy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PPOISD23(q,fxy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,n&     &yv,kxp2,j2blok,nyd)         implicit none         real :: ax, ay, affp, we         integer :: isign, nx, ny, kstrt, nyv, kxp2, j2blok, nyd         real, dimension(nyv,kxp2,j2blok) :: q         real, dimension(3,nyv,kxp2,j2blok) :: fxy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PCUPERPDX2(cu,nx,ny,kstrt,ny2d,kxp2,j2blok)         implicit none         integer :: nx, ny, kstrt, ny2d, kxp2, j2blok         complex, dimension(3,ny2d,kxp2,j2blok) :: cu         end subroutine      end interface      interface         subroutine PCUPERPD2(cu,nx,ny,kstrt,nyv,kxp2,j2blok)         implicit none         integer :: nx, ny, kstrt, nyv, kxp2, j2blok         real, dimension(3,nyv,kxp2,j2blok) :: cu         end subroutine      end interface      interface         subroutine PCUPERPDX22(cu,nx,ny,kstrt,nyv,kxp2,j2blok)         implicit none         integer :: nx, ny, kstrt, nyv, kxp2, j2blok         real, dimension(2,2*nyv,kxp2,j2blok) :: cu         end subroutine      end interface      interface         subroutine PBPOISDX23(cu,bxy,isign,ffd,ax,ay,affp,ci,wm,nx,ny,k&     &strt,ny2d,kxp2,j2blok,nyd)         implicit none         real :: ax, ay, affp, ci, wm         integer :: isign, nx, ny, kstrt, ny2d, kxp2, j2blok, nyd         complex, dimension(3,ny2d,kxp2,j2blok) :: cu, bxy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PBPOISD23(cu,bxy,isign,ffd,ax,ay,affp,ci,wm,nx,ny,ks&     &trt,nyv,kxp2,j2blok,nyd)         implicit none         real :: ax, ay, affp, ci, wm         integer :: isign, nx, ny, kstrt, nyv, kxp2, j2blok, nyd         real, dimension(3,nyv,kxp2,j2blok) :: cu, bxy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PBPOISDX22(cu,bxy,bz,isign,ffd,ax,ay,affp,ci,wm,nx,n&     &y,kstrt,ny2d,kxp2,j2blok,nyd)         implicit none         real :: ax, ay, affp, ci, wm         integer :: isign, nx, ny, kstrt, ny2d, kxp2, j2blok, nyd         complex, dimension(2,ny2d,kxp2,j2blok) :: cu, bxy         complex, dimension(ny2d,kxp2,j2blok) :: bz         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine IPBPOISDX23(cu,bxy,ffd,ci,wm,nx,ny,kstrt,ny2d,kxp2,j&     &2blok,nyd)         implicit none         real :: ci, wm         integer :: nx, ny, kstrt, ny2d, kxp2, j2blok, nyd         complex, dimension(3,ny2d,kxp2,j2blok) :: cu, bxy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine IPBPOISD23(cu,bxy,ffd,ci,wm,nx,ny,kstrt,nyv,kxp2,j2b&     &lok,nyd)         implicit none         real :: ci, wm         integer :: nx, ny, kstrt, nyv, kxp2, j2blok, nyd         real, dimension(3,nyv,kxp2,j2blok) :: cu, bxy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PMAXWELDX2(exy,bxy,cu,ffd,affp,ci,dt,wf,wm,nx,ny,kst&     &rt,ny2d,kxp2,j2blok,nyd)         implicit none         real :: affp, ci, dt, wf, wm         integer :: nx, ny, kstrt, ny2d, kxp2, j2blok, nyd         complex, dimension(3,ny2d,kxp2,j2blok) :: exy, bxy, cu         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PMAXWELD2(exy,bxy,cu,ffd,affp,ci,dt,wf,wm,nx,ny,kstr&     &t,nyv,kxp2,j2blok,nyd)         implicit none         real :: affp, ci, dt, wf, wm         integer :: nx, ny, kstrt, nyv, kxp2, j2blok, nyd         real, dimension(3,nyv,kxp2,j2blok) :: exy, bxy, cu         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PDMFIELDD2(q2,q,nx,ny,kstrt,ny2d,nyv,kxp2,j2blok)         implicit none         integer :: nx, ny, kstrt, ny2d, nyv, kxp2, j2blok         complex, dimension(ny2d,kxp2,j2blok) :: q2         real, dimension(nyv,kxp2,j2blok) :: q         end subroutine      end interface      interface         subroutine PBMFIELDD2(bxy2,bxy,nx,ny,kstrt,ny2d,nyv,kxp2,j2blok&     &)         implicit none         integer :: nx, ny, kstrt, ny2d, nyv, kxp2, j2blok         complex, dimension(3,ny2d,kxp2,j2blok) :: bxy2         real, dimension(3,nyv,kxp2,j2blok) :: bxy         end subroutine      end interface      interface         subroutine PEMFIELDD2(fxy,exy,ffd,isign,nx,ny,kstrt,ny2d,nyv,kx&     &p2,j2blok,nyd)         implicit none         integer :: isign, nx, ny, kstrt, ny2d, nyv, kxp2, j2blok, nyd         complex, dimension(3,ny2d,kxp2,j2blok) :: fxy         real, dimension(3,nyv,kxp2,j2blok) :: exy         complex, dimension(nyd,kxp2,j2blok) :: ffd         end subroutine      end interface      interface         subroutine PAVPOTDX23(bxy,axy,nx,ny,kstrt,ny2d,kxp2,j2blok)         implicit none         integer :: nx, ny, kstrt, ny2d, kxp2, j2blok         complex, dimension(3,ny2d,kxp2,j2blok) :: bxy, axy         end subroutine      end interface      interface         subroutine PAVPOTD23(bxy,axy,nx,ny,kstrt,nyv,kxp2,j2blok)         implicit none         integer :: nx, ny, kstrt, nyv, kxp2, j2blok         real, dimension(3,nyv,kxp2,j2blok) :: bxy, axy         end subroutine      end interface!! define generic interfaces to Fortran90 library!      interface sguardp         module procedure ipscguard2xp         module procedure ipsguard2xp!        module procedure ipscguard2p!        module procedure ipsguard2p      end interface!            interface aguardp         module procedure ipacguard2xp         module procedure ipaguard2xp      end interface!      interface lcguard         module procedure iplcguard2x         module procedure ipldguard2x      end interface!      interface lbguard         module procedure iplbguard2x      end interface!      interface poisd_init         module procedure ippoisd22init      end interface!      interface poisd         module procedure ippoisd2         module procedure ipspoisd2         module procedure ippoisd22      end interface!      interface poisd3         module procedure ippoisd23      end interface!      interface cuperpd         module procedure ipcuperpd2      end interface!      interface bpoisd         module procedure jpbpoisd23      end interface!      interface ibpoisd         module procedure jipbpoisd23      end interface!      interface maxwel         module procedure ipmaxweld2      end interface!      interface emfield         module procedure ipemfieldd2      end interface!      interface bmfield         module procedure ipdmfieldd2         module procedure ipbmfieldd2      end interface!      interface avpotd         module procedure ipavpotd23      end interface!! define Fortran90 interface functions to Fortran77 library!      contains!         subroutine ipscguard2xp(cu,kstrt,nvp,noff,nyp,xj0,yj0,zj0,nx,ny&     &,ipbc,inorder)         implicit none         integer :: kstrt, nvp, nx, ny, ipbc         integer, optional :: inorder         real :: xj0, yj0, zj0         real, dimension(:,:,:,:) :: cu         integer, dimension(:) :: noff, nyp         integer :: ngx = 1, ngy = 1, nxe, nypmx, nblok, order         nxe = size(cu,2); nypmx = size(cu,3); nblok = size(cu,4)         order = QUADRATIC         if (present(inorder)) order = inorder         if (ipbc==1) then            if (order==LINEAR) then               call PSCGUARD2L(cu,nyp,xj0,yj0,zj0,nx,nxe,nypmx,nblok)            else               call PSCGUARD2(cu,nyp,xj0,yj0,zj0,nx,nxe,nypmx,nblok)            endif         else if (ipbc==2) then            if (order==LINEAR) then               call PLSCGUARD2XL(cu,kstrt,nvp,noff,nyp,xj0,yj0,zj0,nx,ny&     &,ngx,ngy,nxe,nypmx,nblok)            else               call PLSCGUARD2X(cu,kstrt,nvp,noff,nyp,xj0,yj0,zj0,nx,ny,&     &ngx,ngy,nxe,nypmx,nblok)            endif         endif         end subroutine ipscguard2xp!         subroutine ipsguard2xp(q,kstrt,nvp,noff,nyp,qi0,nx,ny,ipbc,inor&     &der)         implicit none         integer :: kstrt, nvp, nx, ny, ipbc         integer, optional :: inorder         real :: qi0         real, dimension(:,:,:) :: q         integer, dimension(:) :: noff, nyp         integer :: ngx = 1, ngy = 1, nxe, nypmx, nblok, order         nxe = size(q,1); nypmx = size(q,2); nblok = size(q,3)         order = QUADRATIC         if (present(inorder)) order = inorder         if (ipbc==1) then            if (order==LINEAR) then               call PSGUARD2L(q,nyp,qi0,nx,nxe,nypmx,nblok)            else               call PSGUARD2(q,nyp,qi0,nx,nxe,nypmx,nblok)            endif         else if (ipbc==2) then            if (order==LINEAR) then               call PLSGUARD2XL(q,kstrt,nvp,noff,nyp,qi0,nx,ny,ngx,ngy,n&     &xe,nypmx,nblok)            else               call PLSGUARD2X(q,kstrt,nvp,noff,nyp,qi0,nx,ny,ngx,ngy,nx&     &e,nypmx,nblok)            endif         endif         end subroutine ipsguard2xp!         subroutine ipscguard2p(cu,kstrt,nvp,nyp,xj0,yj0,zj0,nx,ipbc,ino&     &rder)         implicit none         integer :: kstrt, nvp, nx, ipbc         integer, optional :: inorder         real :: xj0, yj0, zj0         real, dimension(:,:,:,:) :: cu         integer, dimension(:) :: nyp         integer :: ngx = 1, ngy = 1, nxe, nypmx, nblok, order         nxe = size(cu,2); nypmx = size(cu,3); nblok = size(cu,4)         order = QUADRATIC         if (present(inorder)) order = inorder         if (ipbc==1) then            if (order==LINEAR) then               call PSCGUARD2L(cu,nyp,xj0,yj0,zj0,nx,nxe,nypmx,nblok)            else               call PSCGUARD2(cu,nyp,xj0,yj0,zj0,nx,nxe,nypmx,nblok)            endif         else if (ipbc==2) then            if (order==LINEAR) then               call PLSCGUARD2L(cu,kstrt,nvp,nyp,xj0,yj0,zj0,nx,ngx,ngy,&     &nxe,nypmx,nblok)            else               call PLSCGUARD2(cu,kstrt,nvp,nyp,xj0,yj0,zj0,nx,ngx,ngy,n&     &xe,nypmx,nblok)            endif         endif         end subroutine ipscguard2p!         subroutine ipsguard2p(q,kstrt,nvp,nyp,qi0,nx,ipbc,inorder)         implicit none         integer :: kstrt, nvp, nx, ipbc         integer, optional :: inorder         real :: qi0         real, dimension(:,:,:) :: q         integer, dimension(:) :: nyp         integer :: ngx = 1, ngy = 1, nxe, nypmx, nblok, order         nxe = size(q,1); nypmx = size(q,2); nblok = size(q,3)         order = QUADRATIC         if (present(inorder)) order = inorder         if (ipbc==1) then            if (order==LINEAR) then               call PSGUARD2L(q,nyp,qi0,nx,nxe,nypmx,nblok)            else               call PSGUARD2(q,nyp,qi0,nx,nxe,nypmx,nblok)            endif         else if (ipbc==2) then            if (order==LINEAR) then               call PLSGUARD2L(q,kstrt,nvp,nyp,qi0,nx,ngx,ngy,nxe,nypmx,&     &nblok)            else               call PLSGUARD2(q,kstrt,nvp,nyp,qi0,nx,ngx,ngy,nxe,nypmx,n&     &blok)            endif         endif         end subroutine ipsguard2p!         subroutine ipacguard2xp(cu,nyp,nx,ipbc,inorder)         implicit none         integer :: nx, ipbc         integer, optional :: inorder         real, dimension(:,:,:,:) :: cu         integer, dimension(:) :: nyp         integer :: nxe, nypmx, nblok, order         nxe = size(cu,2); nypmx = size(cu,3); nblok = size(cu,4)         order = QUADRATIC         if (present(inorder)) order = inorder         if (ipbc==1) then            if (order==LINEAR) then               call PACGUARD2XL(cu,nyp,nx,nxe,nypmx,nblok)            else               call PACGUARD2X(cu,nyp,nx,nxe,nypmx,nblok)            endif         else if (ipbc==2) then            if (order==QUADRATIC) then               call PLACGUARD2X(cu(1,2,1,1),nyp,nx-2,nxe,nypmx,nblok)            endif         endif         end subroutine ipacguard2xp!         subroutine ipaguard2xp(q,nyp,nx,ipbc,inorder)         implicit none         integer :: nx, ipbc         integer, optional :: inorder         real, dimension(:,:,:) :: q         integer, dimension(:) :: nyp         integer :: nxe, nypmx, nblok, order         nxe = size(q,1); nypmx = size(q,2); nblok = size(q,3)         order = QUADRATIC         if (present(inorder)) order = inorder         if (ipbc==1) then            if (order==LINEAR) then               call PAGUARD2XL(q,nyp,nx,nxe,nypmx,nblok)            else               call PAGUARD2X(q,nyp,nx,nxe,nypmx,nblok)            endif         else if (ipbc==2) then            if (order==QUADRATIC) then               call PLAGUARD2X(q(2,1,1),nyp,nx-2,nxe,nypmx,nblok)            endif         endif         end subroutine ipaguard2xp!         subroutine iplcguard2x(fxy,nyp,nx,inorder)         implicit none         integer :: nx         integer, optional :: inorder         real, dimension(:,:,:,:) :: fxy         integer, dimension(:) :: nyp         integer :: nxe, nypmx, nblok, order         nxe = size(fxy,2); nypmx = size(fxy,3); nblok = size(fxy,4)         order = QUADRATIC         if (present(inorder)) order = inorder         if (order==QUADRATIC) then            call PLCGUARD2X(fxy,nyp,nx,nxe,nypmx,nblok)         endif         end subroutine iplcguard2x!         subroutine ipldguard2x(q,nyp,nx,inorder)         implicit none         integer :: nx         integer, optional :: inorder         real, dimension(:,:,:) :: q         integer, dimension(:) :: nyp         integer :: nxe, nypmx, nblok, order         nxe = size(q,1); nypmx = size(q,2); nblok = size(q,3)         order = QUADRATIC         if (present(inorder)) order = inorder         if (order==QUADRATIC) then            call PLDGUARD2X(q,nyp,nx,nxe,nypmx,nblok)         endif         end subroutine ipldguard2x!         subroutine iplbguard2x(bxy,nyp,nx,inorder)         implicit none         integer :: nx         integer, optional :: inorder         real, dimension(:,:,:,:) :: bxy         integer, dimension(:) :: nyp         integer :: nxe, nypmx, nblok, order         nxe = size(bxy,2); nypmx = size(bxy,3); nblok = size(bxy,4)         order = QUADRATIC         if (present(inorder)) order = inorder         if (order==QUADRATIC) then            call PLBGUARD2X(bxy,nyp,nx,nxe,nypmx,nblok)         endif         end subroutine iplbguard2x!         subroutine ippoisd2(q,fx,ffd,we,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         real :: we         complex, dimension(:,:,:) :: q, fx, ffd         integer :: isign = 1, ny2d, kxp2, j2blok, nyd         real :: ax, ay, affp         complex, dimension(1,1,1) :: fy         ny2d = size(q,1)         nyd = size(ffd,1); kxp2 = size(ffd,2); j2blok = size(ffd,3)         call PPOISDX2(q,fx,fy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,ny2d,&     &kxp2,j2blok,nyd)         end subroutine ippoisd2!         subroutine ipspoisd2(q,fy,ffd,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         complex, dimension(:,:,:) :: q, fy, ffd         integer :: isign = 2, ny2d, kxp2, j2blok, nyd         real :: ax, ay, affp, we         complex, dimension(1,1,1) :: fx         ny2d = size(q,1)         nyd = size(ffd,1); kxp2 = size(ffd,2); j2blok = size(ffd,3)         call PPOISDX2(q,fx,fy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,ny2d,&     &kxp2,j2blok,nyd)         end subroutine ipspoisd2!         subroutine ippoisd22init(ffd,ax,ay,affp,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         real :: ax, ay, affp         complex, dimension(:,:,:) :: ffd         integer :: isign = 0, ny2d, kxp2, j2blok, nyd         real :: we         complex, dimension(1,1,1) :: q         complex, dimension(2,1,1,1) :: fxy         ny2d = size(q,1)         nyd = size(ffd,1); kxp2 = size(ffd,2); j2blok = size(ffd,3)         call PPOISDX22(q,fxy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,ny2d,k&     &xp2,j2blok,nyd)         end subroutine ippoisd22init!         subroutine ippoisd22(q,fxy,ffd,we,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         real :: we         complex, dimension(:,:,:) :: q, ffd         complex, dimension(:,:,:,:) :: fxy         integer :: isign = -1, ny2d, kxp2, j2blok, nyd         real :: ax, ay, affp         ny2d = size(q,1)         nyd = size(ffd,1); kxp2 = size(ffd,2); j2blok = size(ffd,3)         if (size(fxy,1)==2) then            call PPOISDX22(q,fxy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,ny2&     &d,kxp2,j2blok,nyd)         else if (size(fxy,1)==3) then            call PPOISDX23(q,fxy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,ny2&     &d,kxp2,j2blok,nyd)         endif         end subroutine ippoisd22!         subroutine ippoisd23(q,fxy,ffd,we,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         real :: we         complex, dimension(:,:,:) :: q, ffd         complex, dimension(:,:,:,:) :: fxy         integer :: isign = -1, ny2d, kxp2, j2blok, nyd         real :: ax, ay, affp         ny2d = size(q,1)         nyd = size(ffd,1); kxp2 = size(ffd,2); j2blok = size(ffd,3)         call PPOISDX23(q,fxy,isign,ffd,ax,ay,affp,we,nx,ny,kstrt,ny2d,k&     &xp2,j2blok,nyd)         end subroutine ippoisd23!         subroutine ipcuperpd2(cu,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         complex, dimension(:,:,:,:) :: cu         integer :: ny2d, kxp2, j2blok         ny2d = size(cu,2); kxp2 = size(cu,3); j2blok = size(cu,4)         call PCUPERPDX2(cu,nx,ny,kstrt,ny2d,kxp2,j2blok)         end subroutine ipcuperpd2!         subroutine jpbpoisd23(cu,bxy,ffd,ci,wm,nx,ny,kstrt)! vector potential         implicit none         integer :: nx, ny, kstrt         real :: ci, wm         complex, dimension(:,:,:) :: ffd         complex, dimension(:,:,:,:) :: cu, bxy         integer :: isign = 1, ny2d, kxp2, j2blok, nyd         real :: ax, ay, affp         ny2d = size(cu,2)         nyd = size(ffd,1); kxp2 = size(ffd,2); j2blok = size(ffd,3)         call PBPOISDX23(cu,bxy,isign,ffd,ax,ay,affp,ci,wm,nx,ny,kstrt,n&     &y2d,kxp2,j2blok,nyd)         end subroutine jpbpoisd23!         subroutine jipbpoisd23(cu,bxy,ffd,ci,wm,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         real :: ci, wm         complex, dimension(:,:,:) :: ffd         complex, dimension(:,:,:,:) :: cu, bxy         integer :: ny2d, kxp2, j2blok, nyd         ny2d = size(cu,2)         nyd = size(ffd,1); kxp2 = size(ffd,2); j2blok = size(ffd,3)         call IPBPOISDX23(cu,bxy,ffd,ci,wm,nx,ny,kstrt,ny2d,kxp2,j2blok,&     &nyd)         end subroutine jipbpoisd23!         subroutine ipmaxweld2(exy,bxy,cu,ffd,affp,ci,dt,wf,wm,nx,ny,kst&     &rt)         implicit none         integer :: nx, ny, kstrt         real :: affp, ci, dt, wf, wm         complex, dimension(:,:,:) :: ffd         real, dimension(:,:,:,:) :: exy, bxy, cu         integer :: nyv, kxp2, j2blok, nyd         nyv = size(cu,2)         nyd = size(ffd,1); kxp2 = size(ffd,2); j2blok = size(ffd,3)         call PMAXWELD2(exy,bxy,cu,ffd,affp,ci,dt,wf,wm,nx,ny,kstrt,nyv,&     &kxp2,j2blok,nyd)         end subroutine ipmaxweld2!         subroutine ipdmfieldd2(q2,q,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         complex, dimension(:,:,:) :: q2         real, dimension(:,:,:) :: q         integer :: ny2d, kxp2, j2blok, nyv         ny2d = size(q2,1); kxp2 = size(q2,2); j2blok = size(q2,3)         nyv = size(q,1)         call PDMFIELDD2(q2,q,nx,ny,kstrt,ny2d,nyv,kxp2,j2blok)         end subroutine ipdmfieldd2!         subroutine ipbmfieldd2(bxy2,bxy,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         complex, dimension(:,:,:,:) :: bxy2         real, dimension(:,:,:,:) :: bxy         integer :: ny2d, kxp2, j2blok, nyv         ny2d = size(bxy2,2); kxp2 = size(bxy2,3); j2blok = size(bxy2,4)         nyv = size(bxy,2)         call PBMFIELDD2(bxy2,bxy,nx,ny,kstrt,ny2d,nyv,kxp2,j2blok)         end subroutine ipbmfieldd2!         subroutine ipemfieldd2(fxy,exy,ffd,isign,nx,ny,kstrt)         implicit none         integer :: isign, nx, ny, kstrt, nyd         complex, dimension(:,:,:,:) :: fxy         real, dimension(:,:,:,:) :: exy         complex, dimension(:,:,:) :: ffd         integer :: ny2d, kxp2, j2blok, nyv         ny2d = size(fxy,2); kxp2 = size(fxy,3); j2blok = size(fxy,4)         nyv = size(exy,2); nyd = size(ffd,1)         call PEMFIELDD2(fxy,exy,ffd,isign,nx,ny,kstrt,ny2d,nyv,kxp2,j2b&     &lok,nyd)         end subroutine ipemfieldd2!         subroutine ipavpotd23(bxy,axy,nx,ny,kstrt)         implicit none         integer :: nx, ny, kstrt         real, dimension(:,:,:,:) :: bxy, axy         integer :: nyv, kxp2, j2blok         nyv = size(bxy,2); kxp2 = size(bxy,3); j2blok = size(bxy,4)         call PAVPOTD23(bxy,axy,nx,ny,kstrt,nyv,kxp2,j2blok)         end subroutine ipavpotd23!      end module pdfield2d