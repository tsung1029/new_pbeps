!-----------------------------------------------------------------------!      module pinit2d!! Fortran90 interface to 2d parallel PIC Fortran77 library pinit2lib.f! written by viktor k. decyk, ucla! copyright 1999, regents of the university of california! update: november 20, 2002!      use globals, only: LINEAR, QUADRATIC, STANDARD, LOOKAHEAD, VECTOR      implicit none!     private      public :: indx, indy, npx, npy, npxb, npyb, inorder, popt, dopt      public :: djopt, ntw, ntp      public :: tend, dt, vtx, vty, vtz, qme, vdx, vdy, vdz      public :: vtdx, vtdy, vtdz, ci, ax, ay      public :: pinput2, sendnml, distr!! Namelist Input      save!! indx/indy = exponent which determines length in x/y direction,! where nx=2**indx, ny=2**indy! npx/npy = initial number of particles distributed in x/y direction!     integer :: indx =   5, indy =   6, npx =      96, npy =     192      integer :: indx =   6, indy =   7, npx =     384, npy =     768!     integer :: indx =   7, indy =   8, npx =    1280, npy =    2560! npxb/npyb = initial number of particles in beam in x/y direction!     integer :: npxb =  32, npyb =  64      integer :: npxb = 128, npyb = 256!     integer :: npxb = 384, npyb = 768! inorder = interpolation order! popt = particle optimization scheme! dopt = charge deposit optimization scheme! djopt = current deposit optimization scheme      integer :: inorder = QUADRATIC, popt = LOOKAHEAD, dopt = LOOKAHEAD      integer :: djopt = STANDARD! ntw = number of time steps between energy diagnostic! ntp = number of time steps between potential diagnostic      integer :: ntw = 1, ntp = 0! tend = time at end of simulation, in units of plasma frequency! dt = time interval between successive calculations      real :: tend =  65.000, dt = 0.2000000e+00! vtx/vty/vtz = thermal velocity of electrons in x/y/z direction! qme = charge on electron, in units of e      real :: vtx = 1., vty = 1., vtz = 1., qme = -1.! vdx/vdy/vdz = drift velocity of beam electrons in x/y/z direction      real :: vdx = 0., vdy = 5., vdz = 0.! vtdx/vtdy/vtdz = thermal velocity of beam electrons in x/y/z direction      real :: vtdx = .5, vtdy = .5, vtdz = .5! ci = reciprical of velocity of light      real :: ci = 1.0! ax/ay = half-width of particle in x/y direction      real :: ax = .866667, ay = .866667!     real :: ax = .912871, ay = .912871! define namelist      namelist /pinput2/ indx, indy, npx, npy, npxb, npyb, inorder, popt&     &, dopt, djopt, ntw, ntp, tend, dt, vtx, vty, qme, vdx, vdy, vtdx, &     &vtdy, ci, ax, ay!! define interface to original Fortran77 procedures      interface         subroutine PISTR2(part,edges,npp,nps,vtx,vty,vdx,vdy,npx,npy,nx&     &,ny,idimp,npmax,nblok,idps,ipbc,ierr)         implicit none         integer :: npx, npy, nx, ny, idimp, npmax, nblok, idps, ipbc         integer :: ierr         real :: vtx, vty, vdx, vdy         real, dimension(idimp,npmax,nblok) :: part         real, dimension(idps,nblok) :: edges         integer, dimension(nblok) :: npp, nps         end subroutine      end interface      interface         subroutine PISTR2H(part,edges,npp,nps,vtx,vty,vtz,vdx,vdy,vdz,n&     &px,npy,nx,ny,idimp,npmax,nblok,idps,ipbc,ierr)         implicit none         integer :: npx, npy, nx, ny, idimp, npmax, nblok, idps, ipbc         integer :: ierr         real :: vtx, vty, vtz, vdx, vdy, vdz         real, dimension(idimp,npmax,nblok) :: part         real, dimension(idps,nblok) :: edges         integer, dimension(nblok) :: npp, nps         end subroutine      end interface      interface         subroutine PBDISTR2L(part,bx,by,bz,npp,noff,qbm,nx,ny,idimp,npm&     &ax,nblok,nxv,nypmx)         implicit none         integer :: nx, ny, idimp, npmax, nblok, nxv, nypmx         real :: qbm         real, dimension(idimp,npmax,nblok) :: part         real, dimension(nxv,nypmx,nblok):: bx, by, bz         integer, dimension(nblok) :: npp, noff         end subroutine      end interface      interface         subroutine PGBDISTR2L(part,bxy,npp,noff,qbm,nx,ny,idimp,npmax,n&     &blok,nxv,nypmx,ipbc)         implicit none         integer :: nx, ny, idimp, npmax, nblok, nxv, nypmx, ipbc         real :: qbm         real, dimension(idimp,npmax,nblok) :: part         real :: bxy         integer, dimension(nblok) :: npp, noff         end subroutine      end interface!! define generic interfaces to Fortran90 library!      interface distr         module procedure ipistr2         module procedure ipistrh2         module procedure ibpistr2      end interface      interface sendnml         module procedure sendnml2      end interface!! define Fortran90 interface functions to Fortran77 library!      contains!         subroutine sendnml2()! this subroutine packs 2d namelist variables into a double precision! buffer and broadcasts them to other nodes         integer, parameter :: lenml = 24         double precision, dimension(lenml) :: ddata! pack data         ddata(1) = indx; ddata(2) = indy         ddata(3) = npx; ddata(4) = npy         ddata(5) = npxb; ddata(6) = npyb         ddata(7) = inorder; ddata(8) = popt; ddata(9) = dopt         ddata(10) = djopt; ddata(11) = ntw; ddata(12) = ntp         ddata(13) = tend; ddata(14) = dt         ddata(15) = vtx; ddata(16) = vty         ddata(17) = qme         ddata(18) = vdx; ddata(19) = vdy         ddata(20) = vtdx; ddata(21) = vtdy         ddata(22) = ci; ddata(23) = ax; ddata(24) = ay! broadcast data         call PBCAST(ddata,lenml)! unpack data         indx = ddata(1); indy = ddata(2)         npx = ddata(3); npy = ddata(4)         npxb = ddata(5); npyb = ddata(6)         inorder = ddata(7); popt = ddata(8); dopt = ddata(9)         djopt = ddata(10); ntw = ddata(11); ntp = ddata(12)         tend = ddata(13); dt = ddata(14)         vtx = ddata(15); vty = ddata(16)         qme = ddata(17)         vdx = ddata(18); vdy = ddata(19)         vtdx = ddata(20); vtdy = ddata(21)         ci = ddata(22); ax = ddata(23); ay = ddata(24)         end subroutine sendnml2!         subroutine ipistr2(part,edges,npp,nps,vtx,vty,vdx,vdy,npx,npy,n&     &x,ny,ipbc)         implicit none         integer :: npx, npy, nx, ny, ipbc         real :: vtx, vty, vdx, vdy         real, dimension(:,:,:) :: part         real, dimension(:,:) :: edges         integer, dimension(:) :: npp, nps         integer :: idimp, npmax, nblok, idps, ierr         idimp = size(part,1); npmax = size(part,2)         nblok = size(part,3); idps = size(edges,1)         call PISTR2(part,edges,npp,nps,vtx,vty,vdx,vdy,npx,npy,nx,ny,id&     &imp,npmax,nblok,idps,ipbc,ierr)         end subroutine ipistr2!         subroutine ipistrh2(part,edges,npp,nps,vtx,vty,vtz,vdx,vdy,vdz,&     &npx,npy,nx,ny,ipbc)         implicit none         integer :: npx, npy, nx, ny, ipbc         real :: vtx, vty, vtz, vdx, vdy, vdz         real, dimension(:,:,:) :: part         real, dimension(:,:) :: edges         integer, dimension(:) :: npp, nps         integer :: idimp, npmax, nblok, idps, ierr         idimp = size(part,1); npmax = size(part,2)         nblok = size(part,3); idps = size(edges,1)         call PISTR2H(part,edges,npp,nps,vtx,vty,vtz,vdx,vdy,vdz,npx,npy&     &,nx,ny,idimp,npmax,nblok,idps,ipbc,ierr)         end subroutine ipistrh2!         subroutine ibpistr2(part,bxy,npp,noff,qbm,nx,ny,ipbc,inorder)         implicit none         integer :: nx, ny, ipbc         integer, optional :: inorder         real :: qbm         real, dimension(:,:,:) :: part         real, dimension(:,:,:,:) :: bxy         integer, dimension(:) :: npp, noff         integer :: idimp, npmax, nblok, nxv, nypmx, order         idimp = size(part,1); npmax = size(part,2)         nblok = size(part,3)         nxv = size(bxy,2); nypmx = size(bxy,3)         order = QUADRATIC         if (present(inorder)) order = inorder         if (order==LINEAR) then            call PGBDISTR2L(part,bxy(1,1,1,1),npp,noff,qbm,nx,ny,idimp,n&     &pmax,nblok,nxv,nypmx,ipbc)         else            call PGBDISTR2L(part,bxy(1,2,2,1),npp,noff,qbm,nx,ny,idimp,n&     &pmax,nblok,nxv,nypmx,ipbc)         endif         end subroutine ibpistr2!      end module pinit2d